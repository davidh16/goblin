package {{.MiddlewaresPackage}}

import (
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"net/http"
	"time"
)

type RateLimiterMiddleware middleware.RateLimiterConfig

func NewRateLimiterMiddleware() *RateLimiterMiddleware {
	return &RateLimiterMiddleware{}
}

func (r *RateLimiterMiddleware) SetSkipper(skipper func(ctx echo.Context) bool) *RateLimiterMiddleware {
	r.Skipper = skipper
	return r
}

func (r *RateLimiterMiddleware) SetStore(store middleware.RateLimiterStore) *RateLimiterMiddleware {
	r.Store = store
	return r
}

func (r *RateLimiterMiddleware) SetIdentifierExtractor(extractor func(context echo.Context) (string, error)) *RateLimiterMiddleware {
	r.IdentifierExtractor = extractor
	return r
}

func (r *RateLimiterMiddleware) SetErrorHandler(errorHandler func(context echo.Context, err error) error) *RateLimiterMiddleware {
	r.ErrorHandler = errorHandler
	return r
}

func (r *RateLimiterMiddleware) SetDenyHandler(denyHandler func(context echo.Context, identifier string, err error) error) *RateLimiterMiddleware {
	r.DenyHandler = denyHandler
	return r
}

func (r *RateLimiterMiddleware) Build() middleware.RateLimiterConfig {
	return (middleware.RateLimiterConfig)(*r)
}

func NewRateLimiterConfig() middleware.RateLimiterConfig {
	return NewRateLimiterMiddleware().
		SetSkipper(middleware.DefaultSkipper).
		SetIdentifierExtractor(func(context echo.Context) (string, error) {
			id := context.RealIP()
			return id, nil
		}).
		SetStore(middleware.NewRateLimiterMemoryStoreWithConfig(
			middleware.RateLimiterMemoryStoreConfig{Rate: 100, Burst: 200, ExpiresIn: 5 * time.Minute},
		)).
		SetErrorHandler(func(context echo.Context, err error) error {
			return context.JSON(http.StatusForbidden, nil)
		}).
		SetDenyHandler(func(context echo.Context, identifier string, err error) error {
			return context.JSON(http.StatusTooManyRequests, nil)
		}).
		Build()
}
