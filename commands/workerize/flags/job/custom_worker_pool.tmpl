package {{.WorkersPackage}}

import (
	"context"
	"{{.JobsPackageImport}}"
	"{{.ServicePackageImport}}"
	"{{.LoggerPackageImport}}"
	"time"
)

type {{.WorkerPoolName}} struct {
	poolSize       int
	maxRetries     int
	{{.WorkerName}} WorkerInterface
}

type {{.WorkerName}} struct {
	{{.ServicesToImplement | GenerateWorkerStructFields}}
}

func New{{.WorkerPoolName}}(poolSize int, maxRetries int, centralService *{{.ServicePackage}}.CentralService) *{{.WorkerPoolName}} {
	return &{{.WorkerPoolName}}{
		poolSize:       poolSize,
		maxRetries:     maxRetries,
		{{.WorkerName}}: New{{.WorkerName}}(centralService),
	}
}

func New{{.WorkerName}}(centralService *{{.ServicePackage}}.CentralService) *{{.WorkerName}} {
	return &{{.WorkerName}}{
		{{.ServicesToImplement | GenerateImplementations}}
	}
}

func (worker *{{.WorkerPoolName}}) Start(ctx context.Context, jobChan chan *jobs.Job, resultChan chan *jobs.JobResult) {
	for i := 0; i < worker.poolSize; i++ {
		go func(workerID int) {
			for {
				select {
				case <-ctx.Done():
					return
				case job := <-jobChan:
					if job.NextAttemptAt != nil {
						if time.Now().Before(*job.NextAttemptAt) {
							delay := time.Until(*job.NextAttemptAt)
							{{.LoggerPackage}}.Logger.Debug().Msgf("⏳ Job %s not ready yet, delaying %s", job.Uuid, delay)
							time.AfterFunc(delay, func() {
								resultChan <- worker.{{.WorkerName}}.HandleJob(ctx, job)
							})

							continue
						}
					}

					resultChan <- worker.{{.WorkerName}}.HandleJob(ctx, job)
				}
			}
		}(i)
	}
}

func (w *{{.WorkerName}}) HandleJob(ctx context.Context, job *jobs.Job) *jobs.JobResult {

	{{.LoggerPackage}}.Logger.LogDebug().Msgf("Handling job: %v", job.Uuid)

	_, err := jobs.ParseMetadata[jobs.{{.CustomJobMetadataName}}](job.Metadata)
	if err != nil {
		return &jobs.JobResult{
			Err: err,
			Job: job,
		}
	}


	return &jobs.JobResult{
		Job: job,
		Err: nil,
	}
}
